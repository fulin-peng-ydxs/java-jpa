<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
                                 http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">

    <!--持久化单元 name：持久化单元名字 transaction-type：指定 JPA  的事务处理策略。RESOURCE_LOCAL：默认值，数据库级别的事务，只能针对一种数据库，不支持分布式事务。
如果需要支持分布式事务，使用JTA：transaction-type="JTA“-->
    <persistence-unit name="myPersistenceUnit" transaction-type="RESOURCE_LOCAL">
        <!--jpa实现-->
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <!--jpa执行的目标实体：可以不用配，会自动扫描，但取决于jpa的实现，且可能会有性能问题-->
<!--        <class></class>-->
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3307/jpa"/>
            <property name="javax.persistence.jdbc.user" value="root"/>
            <property name="javax.persistence.jdbc.password" value="root"/>
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
            <!--操作的数据库方言:可以设置指定版本的方言-->
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL57Dialect"/>
            <!--hibernate.hbm2ddl.auto是Hibernate配置属性之一，它指定Hibernate在启动时自动创建数据库表结构、更新表结构或不做任何操作。它的可选值包括：
              validate：校验数据库表结构和实体类之间的映射，不会对数据库进行任何更改。
              update：更新数据库表结构以匹配实体类的映射，但不会删除已经存在的表或列。这种方式可以用于在开发环境中调整表结构。
              create：在启动时创建数据库表结构，但是如果表或列已经存在，则会抛出异常。
              create-drop：在启动时创建数据库表结构，但是在关闭Hibernate时删除它们。这种方式适用于测试和开发环境。
              需要注意的是，在生产环境中，不建议使用create和create-drop，因为它们可能会删除现有数据，导致数据丢失。正确的方式是使用数据库迁移工具来管理表结构变更。
             -->
            <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
            <!--显示执行的sql-->
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="true"/>
        </properties>
    </persistence-unit>

</persistence>
